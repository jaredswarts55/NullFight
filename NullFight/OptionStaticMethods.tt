<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var amount = 10;
#>
using System;
using System.Diagnostics;

namespace NullFight
{
    public partial struct Option
    {
<# for(var t = 2; t < amount; t++) {
   var range = Enumerable.Range(1, t);
   var typeArray = range.Aggregate(string.Empty, (c,x) => string.Format("{0}T{1}, ", c, x)).Trim(',',' ');
   var optionArray = range.Aggregate(string.Empty, (c,x) => string.Format("{0}Option<T{1}> option{1}, ", c, x)).Trim(',',' ');
   var optionTupleArray = range.Aggregate(string.Empty, (c,x) => string.Format("{0}option{1}.GetValueOrThrow(exceptionMessage ?? \"Value not present in Option\"), ", c, x)).Trim(',',' ');
#>
        /// <summary>
        /// Takes a list of Options and returns a single tuple containing all of their values. It will throw an exception if any of them are missing a value.
        /// </summary>
        /// <returns></returns>
        public static (<#= typeArray #>) GetValueOrThrow<<#= typeArray #>>(<#= optionArray #>, string exceptionMessage = null)
        {
            return (<#= optionTupleArray #>);
        }

<#}#>

<# for(var t = 2; t < amount; t++) {
   var range = Enumerable.Range(1, t);
   var typeArray = range.Aggregate(string.Empty, (c,x) => string.Format("{0}T{1}, ", c, x)).Trim(',',' ');
   var optionArray = range.Aggregate(string.Empty, (c,x) => string.Format("{0}Option<T{1}> option{1}, ", c, x)).Trim(',',' ');
   var optionTupleArray = range.Aggregate(string.Empty, (c,x) => string.Format("{0}option{1}.Value, ", c, x)).Trim(',',' ');
#>
        /// <summary>
        /// Takes a list of Options and returns a single tuple containing all of their values event if they are None(). Nulls will need to be checked.
        /// </summary>
        /// <returns></returns>
        public static (<#= typeArray #>) GetValues<<#= typeArray #>>(<#= optionArray #>)
        {
            return (<#= optionTupleArray #>);
        }

<#}#>
    }
}
